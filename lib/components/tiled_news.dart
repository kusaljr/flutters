import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:new_app/models/News_model.dart';
import 'package:http/http.dart' as http;
import 'package:new_app/pages/news_view.dart';

Future<Autogenerated> fetchAlbum() async {
  final response = await http.get(Uri.parse(
      'https://newsapi.org/v2/everything?q=premier league&apiKey=ac2abb4abbda48bea9626736ef22249e'));

  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    return Autogenerated.fromJson(jsonDecode(response.body));
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Failed to load album');
  }
}

class TiledNews extends StatefulWidget {
  const TiledNews({Key? key}) : super(key: key);

  @override
  _TiledNewsState createState() => _TiledNewsState();
}

class _TiledNewsState extends State<TiledNews> {
  late Future<Autogenerated> futureArticles;

  @override
  void initState() {
    futureArticles = fetchAlbum();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    var size = MediaQuery.of(context).size;
    return Container(
      child: Center(
        child: FutureBuilder<Autogenerated>(
          future: futureArticles,
          builder: (context, AsyncSnapshot snapshot) {
            if (snapshot.hasData) {
              return Column(
                children: List.generate(snapshot.data.articles.length, (index) {
                  Articles newsItem = snapshot.data.articles[index];

                  int newsDescriptionLength =
                      snapshot.data.articles[index].content.length;
                  return GestureDetector(
                    onTap: () {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) =>
                                  NewsViewPage(newsPost: newsItem)));
                    },
                    child: Container(
                      margin: EdgeInsets.symmetric(vertical: 5),
                      padding: EdgeInsets.all(5),
                      decoration: BoxDecoration(
                          color: Colors.grey[200],
                          borderRadius: BorderRadius.circular(10)),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          ClipRRect(
                            child: Image.network(
                              snapshot.data.articles[index].urlToImage,
                              width: 100,
                              height: 100,
                              fit: BoxFit.cover,
                            ),
                            borderRadius: BorderRadius.circular(10),
                          ),
                          SizedBox(
                            width: 10,
                          ),
                          Expanded(
                            child: Column(
                              children: [
                                SizedBox(
                                  height: 10,
                                ),
                                Container(
                                    child: Text(
                                  getTruncatedTitle(
                                      snapshot.data.articles[index].title, 60),
                                )),
                                SizedBox(
                                  height: 10,
                                ),
                                Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    Text(
                                      "${newsDescriptionLength >= 200 ? (newsDescriptionLength / 200).floor() : (newsDescriptionLength / 200 * 60).floor()} ${newsDescriptionLength >= 200 ? "mins" : "secs"} read",
                                      style: TextStyle(
                                          fontSize: 13,
                                          color: Colors.grey[700]),
                                    ),
                                    Text(
                                      snapshot.data.articles[index].publishedAt,
                                      style: TextStyle(
                                          fontSize: 13,
                                          color: Colors.grey[700]),
                                    ),
                                  ],
                                )
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                }),
              );
            } else if (snapshot.hasError) {
              return Text('${snapshot.error}');
            }

            // By default, show a loading spinner.
            return const Center(
              child: CircularProgressIndicator(),
            );
          },
        ),
      ),
    );
  }

  String getTruncatedTitle(String actualString, int maxLetters) {
    return actualString.length > maxLetters
        ? actualString.substring(0, maxLetters) + "..."
        : actualString;
  }
}
